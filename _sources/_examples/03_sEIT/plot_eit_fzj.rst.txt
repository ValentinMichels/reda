.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download__examples_03_sEIT_plot_eit_fzj.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_03_sEIT_plot_eit_fzj.py:


Importing FZJ EIT40/EIT160 data
===============================

This example shows how to import data from the various versions of the EIT
system developed by Zimmermann et al. 2008
(http://iopscience.iop.org/article/10.1088/0957-0233/19/9/094010/meta).

At this point we only support 3-point data, i.e., data which uses two
electrodes to inject current, and then uses all electrodes to measure the
resulting potential distribution against system ground. Classical four-point
configurations are then computed using superposition.

Required are two files: a data file (usually **eit_data_mnu0.mat** and a text
file (usually **configs.dat** containing the measurement configurations to
extract.

The configs.dat file contains the four-point spreads to be imported from the
measurement. This file is a text file with four columns (A, B, M, N),
separated by spaces or tabs. Each line denotes one measurement: ::

    1   2   4   3
    2   3   5   6

An alternative to the config.dat file is to permute all current injection
dipoles as voltage dipoles, resulting in a fully normal-reciprocal
configuration set. This set can be automatically generated from the measurement
data by providing a special function as the config-parameter in the import
function. This is explained below.



Import reda



.. code-block:: python

    import reda







Initialize an sEIT container



.. code-block:: python

    seit = reda.sEIT()

    # import the data
    seit.import_eit_fzj(
        filename='data_EIT40_v_EZ-2017/eit_data_mnu0.mat',
        configfile='data_EIT40_v_EZ-2017/configs_large_dipoles_norrec.dat'
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    constructing four-point measurements
    generating ids
    assigning ids
    Summary:


an alternative would be to automatically create measurement configurations
from the current injection dipoles:



.. code-block:: python

    from reda.importers.eit_fzj import MD_ConfigsPermutate

    # initialize an sEIT container
    seit_not_used = reda.sEIT()

    # import the data
    seit_not_used.import_eit_fzj(
        filename='data_EIT40_v_EZ-2017/eit_data_mnu0.mat',
        configfile=MD_ConfigsPermutate
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    constructing four-point measurements
    generating ids
    assigning ids
    Summary:


Compute geometric factors



.. code-block:: python

    import reda.utils.geometric_factors as redaK
    import reda.utils.fix_sign_with_K as redafixK

    K = redaK.compute_K_analytical(seit.data, spacing=0.25)
    redaK.apply_K(seit.data, K)
    redafixK.fix_sign_with_K(seit.data)







compute normal and reciprocal pairs
note that this is usually done on import once.



.. code-block:: python

    import reda.utils.norrec as norrec
    seit.data = norrec.assign_norrec_to_df(seit.data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    generating ids
    assigning ids


quadrupoles can be directly accessed using a pandas grouper



.. code-block:: python

    print(seit.abmn)
    quadpole_data = seit.abmn.get_group((10, 29, 15, 34))
    print(quadpole_data[['a', 'b', 'm', 'n', 'frequency', 'r', 'rpha']])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <pandas.core.groupby.generic.DataFrameGroupBy object at 0x2ae51345f320>
            a   b   m   n     frequency         r        rpha
    749    10  29  15  34      0.100000  7.356375   -5.205543
    2229   10  29  15  34      0.314465  7.323810   -6.903037
    3709   10  29  15  34      1.000000  7.282164   -7.242394
    5189   10  29  15  34      3.125000  7.239073   -6.332998
    6669   10  29  15  34     10.000000  7.199660  -12.081013
    8149   10  29  15  34     31.250000  7.176920   -3.132819
    9629   10  29  15  34    110.000000  7.170031    4.958888
    11109  10  29  15  34    312.500000  7.211899    8.671063
    12589  10  29  15  34   1000.000000  7.325287   -2.429873
    14069  10  29  15  34   3150.000000  7.313380  -37.892727
    15549  10  29  15  34  10000.000000  7.035541 -100.904824


filter data



.. code-block:: python

    seit.remove_frequencies(1e-3, 300)
    seit.query('rpha < 10')
    seit.query('rpha > -40')
    seit.query('rho_a > 15 and rho_a < 35')
    seit.query('k < 400')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Remaining frequencies:
    [0.1, 0.31446541, 1.0, 3.125, 10.0, 31.25, 110.0]


Plotting histograms
Raw data plots (execute before applying the filters):



.. code-block:: python


    # import os
    # import reda.plotters.histograms as redahist

    # if not os.path.isdir('hists_raw'):
    #     os.makedirs('hists_raw')

    # # plot histograms for all frequencies
    # r = redahist.plot_histograms_extra_dims(
    #     seit.data, ['R', 'rpha'], ['frequency']
    # )
    # for f in sorted(r.keys()):
    #     r[f]['all'].savefig('hists_raw/hist_raw_f_{0}.png'.format(f), dpi=300)

    # if not os.path.isdir('hists_filtered'):
    #     os.makedirs('hists_filtered')

    # r = redahist.plot_histograms_extra_dims(
    #     seit.data, ['R', 'rpha'], ['frequency']
    # )

    # for f in sorted(r.keys()):
    #     r[f]['all'].savefig(
    #         'hists_filtered/hist_filtered_f_{0}.png'.format(f), dpi=300
    #     )







Now export the data to CRTomo-compatible files



.. code-block:: python

    import reda.exporters.crtomo as redaex
    redaex.write_files_to_directory(seit.data, 'crt_results', norrec='nor', )







Plot pseudosections of all frequencies



.. code-block:: python

    import reda.plotters.pseudoplots as PS
    import pylab as plt

    g = seit.data.groupby('frequency')
    fig, axes = plt.subplots(
        4, 2,
        figsize=(15 / 2.54, 20 / 2.54),
        sharex=True, sharey=True
    )
    for ax, (key, item) in zip(axes.flat, g):
        fig, ax, cb = PS.plot_pseudosection_type2(item, ax=ax, column='r')
        ax.set_title('f: {} Hz'.format(key))
    fig.tight_layout()
    fig.savefig('pseudosections_eit40.pdf')



.. image:: /_examples/03_sEIT/images/sphx_glr_plot_eit_fzj_001.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 1 minutes  6.822 seconds)


.. _sphx_glr_download__examples_03_sEIT_plot_eit_fzj.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_eit_fzj.py <plot_eit_fzj.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_eit_fzj.ipynb <plot_eit_fzj.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
