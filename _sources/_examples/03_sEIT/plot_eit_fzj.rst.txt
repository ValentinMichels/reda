.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download__examples_03_sEIT_plot_eit_fzj.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_03_sEIT_plot_eit_fzj.py:


Importing FZJ EIT40/EIT160 data
===============================

This example shows how to import data from the various versions of the EIT
system developed by Zimmermann et al. 2008
(http://iopscience.iop.org/article/10.1088/0957-0233/19/9/094010/meta).

At this point we only support 3-point data, i.e., data which uses two
electrodes to inject current, and then uses all electrodes to measure the
resulting potential distribution against system ground. Classical four-point
configurations are then computed using superposition.

Required are two files: a data file (usually **eit_data_mnu0.mat** and a text
file (usually **configs.dat** containing the measurement configurations to
extract.

The configs.dat file contains the four-point spreads to be imported from the
measurement. This file is a text file with four columns (A, B, M, N),
separated by spaces or tabs. Each line denotes one measurement: ::

    1   2   4   3
    2   3   5   6

An alternative to the config.dat file is to permute all current injection
dipoles as voltage dipoles, resulting in a fully normal-reciprocal
configuration set. This set can be automatically generated from the measurement
data by providing a special function as the config-parameter in the import
function. This is explained below.


Import reda


.. code-block:: default

    import reda







Initialize an sEIT container


.. code-block:: default

    seit = reda.sEIT()

    # import the data
    seit.import_eit_fzj(
        filename='data_EIT40_v_EZ-2017/eit_data_mnu0.mat',
        configfile='data_EIT40_v_EZ-2017/configs_large_dipoles_norrec.dat'
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/importers/eit_version_2017.py:273: FutureWarning: `real` is deprecated and will be removed in a future version. To eliminate this warning for a Series `ser`, use `np.real(ser.to_numpy())` or `ser.to_numpy().real`.
      sign_re = df['Zt'].real / np.abs(df['Zt'].real)
    constructing four-point measurements
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/importers/eit_fzj.py:204: FutureWarning: `real` is deprecated and will be removed in a future version. To eliminate this warning for a Series `ser`, use `np.real(ser.to_numpy())` or `ser.to_numpy().real`.
      Rsign = np.sign(dfn['Zt'].real)
    generating ids
    assigning ids
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/containers/ERT.py:55: FutureWarning: 
    .ix is deprecated. Please use
    .loc for label based indexing or
    .iloc for positional indexing

    See the documentation here:
    http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated
      self.data = self.data.ix[:, cols]
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pandas/core/indexing.py:822: FutureWarning: 
    .ix is deprecated. Please use
    .loc for label based indexing or
    .iloc for positional indexing

    See the documentation here:
    http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated
      retval = getattr(retval, self.name)._getitem_axis(key, axis=i)
    Summary:
                      r          rpha
    count  16280.000000  16280.000000
    mean      -0.001539   1232.306629
    std       22.939128   1823.550170
    min      -78.975665  -3141.584482
    25%       -5.791215     -9.388102
    50%        0.034648     -1.038730
    75%        5.972380   3132.171261
    max       76.991777   3141.580651



an alternative would be to automatically create measurement configurations
from the current injection dipoles:


.. code-block:: default

    from reda.importers.eit_fzj import MD_ConfigsPermutate

    # initialize an sEIT container
    seit_not_used = reda.sEIT()

    # import the data
    seit_not_used.import_eit_fzj(
        filename='data_EIT40_v_EZ-2017/eit_data_mnu0.mat',
        configfile=MD_ConfigsPermutate
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    constructing four-point measurements
    generating ids
    assigning ids
    Summary:
                      r          rpha
    count  16280.000000  16280.000000
    mean       0.001539   1264.340068
    std       22.939128   1809.580759
    min      -76.991777  -3141.585829
    25%       -5.972380     -9.200987
    50%       -0.034648      1.460763
    75%        5.791215   3132.397700
    max       78.975665   3141.586023



Compute geometric factors


.. code-block:: default

    import reda.utils.geometric_factors as redaK
    import reda.utils.fix_sign_with_K as redafixK

    K = redaK.compute_K_analytical(seit.data, spacing=0.25)
    redaK.apply_K(seit.data, K)
    redafixK.fix_sign_with_K(seit.data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/utils/fix_sign_with_K.py:41: FutureWarning: 
    .ix is deprecated. Please use
    .loc for label based indexing or
    .iloc for positional indexing

    See the documentation here:
    http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated
      dataframe.ix[indices_negative, ['k', 'r']] *= -1
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/utils/fix_sign_with_K.py:47: FutureWarning: 
    .ix is deprecated. Please use
    .loc for label based indexing or
    .iloc for positional indexing

    See the documentation here:
    http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated
      dataframe.ix[indices_switched_ab, ['a', 'b']] = dataframe.ix[
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/utils/fix_sign_with_K.py:48: FutureWarning: 
    .ix is deprecated. Please use
    .loc for label based indexing or
    .iloc for positional indexing

    See the documentation here:
    http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated
      indices_switched_ab, ['b', 'a']
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/utils/fix_sign_with_K.py:51: FutureWarning: 
    .ix is deprecated. Please use
    .loc for label based indexing or
    .iloc for positional indexing

    See the documentation here:
    http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated
      dataframe.ix[indices_switched_mn, ['m', 'n']] = dataframe.ix[
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/utils/fix_sign_with_K.py:52: FutureWarning: 
    .ix is deprecated. Please use
    .loc for label based indexing or
    .iloc for positional indexing

    See the documentation here:
    http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated
      indices_switched_mn, ['n', 'm']
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/utils/fix_sign_with_K.py:57: FutureWarning: 
    .ix is deprecated. Please use
    .loc for label based indexing or
    .iloc for positional indexing

    See the documentation here:
    http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated
      dataframe.ix[indices_negative, 'Vmn'] *= -1
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pandas/core/indexing.py:961: FutureWarning: 
    .ix is deprecated. Please use
    .loc for label based indexing or
    .iloc for positional indexing

    See the documentation here:
    http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated
      return getattr(section, self.name)[new_key]
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/utils/fix_sign_with_K.py:60: FutureWarning: 
    .ix is deprecated. Please use
    .loc for label based indexing or
    .iloc for positional indexing

    See the documentation here:
    http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated
      dataframe.ix[indices_negative, 'Zt'] *= -1
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/utils/fix_sign_with_K.py:79: FutureWarning: `imag` is deprecated and will be removed in a future version. To eliminate this warning for a Series `ser`, use `np.imag(ser.to_numpy())` or `ser.to_numpy().imag`.
      dataframe['Zt'].imag, dataframe['Zt'].real
    /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/reda/utils/fix_sign_with_K.py:79: FutureWarning: `real` is deprecated and will be removed in a future version. To eliminate this warning for a Series `ser`, use `np.real(ser.to_numpy())` or `ser.to_numpy().real`.
      dataframe['Zt'].imag, dataframe['Zt'].real



compute normal and reciprocal pairs
note that this is usually done on import once.


.. code-block:: default

    import reda.utils.norrec as norrec
    seit.data = norrec.assign_norrec_to_df(seit.data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    generating ids
    assigning ids



quadrupoles can be directly accessed using a pandas grouper


.. code-block:: default

    print(seit.abmn)
    quadpole_data = seit.abmn.get_group((10, 29, 15, 34))
    print(quadpole_data[['a', 'b', 'm', 'n', 'frequency', 'r', 'rpha']])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fec28a4f6a0>
            a   b   m   n     frequency         r        rpha
    749    10  29  15  34      0.100000  7.356375   -5.205543
    2229   10  29  15  34      0.314465  7.323810   -6.903037
    3709   10  29  15  34      1.000000  7.282164   -7.242394
    5189   10  29  15  34      3.125000  7.239073   -6.332998
    6669   10  29  15  34     10.000000  7.199660  -12.081013
    8149   10  29  15  34     31.250000  7.176920   -3.132819
    9629   10  29  15  34    110.000000  7.170031    4.958888
    11109  10  29  15  34    312.500000  7.211899    8.671063
    12589  10  29  15  34   1000.000000  7.325287   -2.429873
    14069  10  29  15  34   3150.000000  7.313380  -37.892727
    15549  10  29  15  34  10000.000000  7.035541 -100.904824



filter data


.. code-block:: default

    seit.remove_frequencies(1e-3, 300)
    seit.query('rpha < 10')
    seit.query('rpha > -40')
    seit.query('rho_a > 15 and rho_a < 35')
    seit.query('k < 400')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Remaining frequencies:
    [0.1, 0.31446541, 1.0, 3.125, 10.0, 31.25, 110.0]



Plotting histograms
Raw data plots (execute before applying the filters):


.. code-block:: default


    # import os
    # import reda.plotters.histograms as redahist

    # if not os.path.isdir('hists_raw'):
    #     os.makedirs('hists_raw')

    # # plot histograms for all frequencies
    # r = redahist.plot_histograms_extra_dims(
    #     seit.data, ['R', 'rpha'], ['frequency']
    # )
    # for f in sorted(r.keys()):
    #     r[f]['all'].savefig('hists_raw/hist_raw_f_{0}.png'.format(f), dpi=300)

    # if not os.path.isdir('hists_filtered'):
    #     os.makedirs('hists_filtered')

    # r = redahist.plot_histograms_extra_dims(
    #     seit.data, ['R', 'rpha'], ['frequency']
    # )

    # for f in sorted(r.keys()):
    #     r[f]['all'].savefig(
    #         'hists_filtered/hist_filtered_f_{0}.png'.format(f), dpi=300
    #     )







Now export the data to CRTomo-compatible files
this context manager executes all code within the given directory


.. code-block:: default

    with reda.CreateEnterDirectory('output_eit_fzj_check'):
        import reda.exporters.crtomo as redaex
        redaex.write_files_to_directory(seit.data, 'crt_results', norrec='nor', )







Plot pseudosections of all frequencies


.. code-block:: default

    import reda.plotters.pseudoplots as PS
    import pylab as plt

    with reda.CreateEnterDirectory('output_eit_fzj_check'):
        g = seit.data.groupby('frequency')
        fig, axes = plt.subplots(
            4, 2,
            figsize=(15 / 2.54, 20 / 2.54),
            sharex=True, sharey=True
        )
        for ax, (key, item) in zip(axes.flat, g):
            fig, ax, cb = PS.plot_pseudosection_type2(item, ax=ax, column='r')
            ax.set_title('f: {} Hz'.format(key))
        fig.tight_layout()
        fig.savefig('pseudosections_eit40.pdf')




.. image:: /_examples/03_sEIT/images/sphx_glr_plot_eit_fzj_001.png
    :class: sphx-glr-single-img




alternative


.. code-block:: default

    with reda.CreateEnterDirectory('output_eit_fzj_check'):
        seit.plot_pseudosections(
            column='r', filename='pseudosections_eit40_v2.pdf'
        )







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  17.512 seconds)


.. _sphx_glr_download__examples_03_sEIT_plot_eit_fzj.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_eit_fzj.py <plot_eit_fzj.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_eit_fzj.ipynb <plot_eit_fzj.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
