.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download__examples_03_sEIT_plot_radic_sip256c.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_03_sEIT_plot_radic_sip256c.py:


Importing Radic SIP256c data
============================

.. warning::

    The SIP256c importer is incredibly slow at the moment. Sorry for that.



create the data container



.. code-block:: python

    import reda
    seit = reda.sEIT()







import the data



.. code-block:: python

    seit.import_sip256c('data_Radic_256c/dipdip_skip0_nor.res')
    seit.import_sip256c('data_Radic_256c/dipdip_skip0_rec.res', reciprocal=49)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    number of readings 47
    keys [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]
    generating ids
    assigning ids
    Summary:
    number of readings 47
    keys [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]
    generating ids
    assigning ids
    Summary:


compute K factors (electrode spacing was 3 m)



.. code-block:: python

    import reda.utils.geometric_factors as redaK
    K = redaK.compute_K_analytical(seit.data, spacing=3)
    redaK.apply_K(seit.data, K)







fix signs/pi-shifts caused by negative geometric factors



.. code-block:: python

    import reda.utils.fix_sign_with_K as redaFixK
    redaFixK.fix_sign_with_K(seit.data)






Plot histograms of raw data



.. code-block:: python


    # TODO







filter the data a bit



.. code-block:: python

    seit.query('r > 0')
    seit.query('rpha > -50 and rpha < 30')







group the data into frequencies



.. code-block:: python

    g = seit.data.groupby('frequency')







Plot pseudosection for 10 Hz



.. code-block:: python

    import reda.plotters.pseudoplots as PS
    data_10hz = g.get_group(10)
    fig, ax, cb = PS.plot_pseudosection_type2(
        data_10hz, column='r', log10=True)
    fig, ax, cb = PS.plot_pseudosection_type2(
        data_10hz, column='rpha')




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/03_sEIT/images/sphx_glr_plot_radic_sip256c_001.png
            :class: sphx-glr-multi-img

    *

      .. image:: /_examples/03_sEIT/images/sphx_glr_plot_radic_sip256c_002.png
            :class: sphx-glr-multi-img




Plot pseudosections of all frequencies



.. code-block:: python

    import reda.plotters.pseudoplots as PS
    import pylab as plt
    fig, axes = plt.subplots(
        7, 2,
        figsize=(15 / 2.54, 25 / 2.54),
        sharex=True, sharey=True
    )
    for ax, (key, item) in zip(axes.flat, g):
        fig, ax, cb = PS.plot_pseudosection_type2(
            item, ax=ax, column='r', log10=True)
        ax.set_title('f: {} Hz'.format(key))
    fig.subplots_adjust(
        hspace=1,
        wspace=0.5,
        right=0.9,
        top=0.95,
    )
    fig.savefig('pseudosections_radic.pdf')




.. image:: /_examples/03_sEIT/images/sphx_glr_plot_radic_sip256c_003.png
    :class: sphx-glr-single-img




plotting of SIP/EIS spectra is still somewhat cumbersome, but will be
improved in the future



.. code-block:: python

    import reda.eis.plots as eis_plot
    import numpy as np

    subdata = seit.data.query(
        'a == 1 and b == 2 and m == 5 and n == 4'
    ).sort_values('frequency')
    # determine the norrec-id of this spectrum
    nr_id = subdata['id'].iloc[0]
    subdata_rec = seit.data.query(
        'id == {} and norrec=="rec"'.format(nr_id)
    ).sort_values('frequency')

    spectrum_nor = eis_plot.sip_response(
        frequencies=subdata['frequency'].values,
        rcomplex=subdata['r'] * np.exp(1j * subdata['rpha'] / 1000)
    )
    spectrum_rec = eis_plot.sip_response(
        frequencies=subdata_rec['frequency'].values,
        rcomplex=subdata_rec['r'] * np.exp(1j * subdata_rec['rpha'] / 1000)
    )
    spectrum_nor.plot('spectrum.pdf', reciprocal=spectrum_rec, return_fig=True)



.. image:: /_examples/03_sEIT/images/sphx_glr_plot_radic_sip256c_004.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 0 minutes  36.956 seconds)


.. _sphx_glr_download__examples_03_sEIT_plot_radic_sip256c.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_radic_sip256c.py <plot_radic_sip256c.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_radic_sip256c.ipynb <plot_radic_sip256c.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
