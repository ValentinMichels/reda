.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download__examples_03_sEIT_plot_eit40.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_03_sEIT_plot_eit40.py:


Importing EIT40/EIT160 data
===========================

.. warning::

    This example requires the installation of crtomo-tools, as well as a
    working installation of CRTomo.

The configs.dat file contains the four-point spreads to be imported from the
measurement. This file is a text file with four columns (A, B, M, N),
separated by spaces or tabs. Each line denotes one measurement: ::

    1   2   4   3
    2   3   5   6



Import reda



.. code-block:: python

    import reda







Initialize an sEIT container



.. code-block:: python

    seit = reda.sEIT()

    # Import the data
    seit.import_eit160(
        filename='data_EIT40_v_EZ-2017/eit_data_mnu0.mat',
        configfile='data_EIT40_v_EZ-2017/configs_large_dipoles_norrec.dat'
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    read_mag_single_file: data_EIT40_v_EZ-2017/eit_data_mnu0.mat
    constructing four-point measurements
    Summary:
              frequency           a      ...                Vmn          rpha
    count  16280.000000  16280.0000      ...       16280.000000  16280.000000
    mean    1328.935406     10.5250      ...          -0.009054   1232.306629
    std     2885.893725      5.8096      ...         106.236678   1823.550170
    min        0.100000      1.0000      ...        -376.749333  -3141.584482
    25%        1.000000      5.7500      ...         -26.804515     -9.388102
    50%       31.250000     10.5000      ...           0.167722     -1.038730
    75%     1000.000000     15.2500      ...          27.824750   3132.171261
    max    10000.000000     21.0000      ...         351.066301   3141.580651

    [8 rows x 16 columns]


Compute geometric factors



.. code-block:: python

    import reda.utils.geometric_factors as redaK
    import reda.utils.fix_sign_with_K as redafixK

    K = redaK.compute_K_analytical(seit.data, spacing=0.25)
    redaK.apply_K(seit.data, K)
    redafixK.fix_sign_with_K(seit.data)







Compute normal and reciprocal pairs



.. code-block:: python

    import reda.utils.norrec as norrec
    norrec.assign_norrec_to_df(seit.data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    generating ids
    assigning ids


filter data



.. code-block:: python

    seit.remove_frequencies(1e-3, 300)
    seit.query('rpha < 10')
    seit.query('rpha > -40')
    seit.query('rho_a > 15 and rho_a < 35')
    seit.query('K < 400')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Remaining frequencies:
    [0.1, 0.31446541, 1.0, 3.125, 10.0, 31.25, 110.0]


Plotting histograms
Raw data plots (execute before applying the filters):



.. code-block:: python


    # import os
    # import reda.plotters.histograms as redahist

    # if not os.path.isdir('hists_raw'):
    #     os.makedirs('hists_raw')

    # # plot histograms for all frequencies
    # r = redahist.plot_histograms_extra_dims(
    #     seit.data, ['R', 'rpha'], ['frequency']
    # )
    # for f in sorted(r.keys()):
    #     r[f]['all'].savefig('hists_raw/hist_raw_f_{0}.png'.format(f), dpi=300)

    # if not os.path.isdir('hists_filtered'):
    #     os.makedirs('hists_filtered')

    # r = redahist.plot_histograms_extra_dims(
    #     seit.data, ['R', 'rpha'], ['frequency']
    # )

    # for f in sorted(r.keys()):
    #     r[f]['all'].savefig(
    #         'hists_filtered/hist_filtered_f_{0}.png'.format(f), dpi=300
    #     )







Now export the data to CRTomo-compatible files



.. code-block:: python

    import reda.exporters.crtomo as redaex
    redaex.write_files_to_directory(seit.data, 'crt_results', norrec='nor', )







Plot pseudosections of all frequencies



.. code-block:: python

    import reda.plotters.pseudoplots as PS
    import pylab as plt

    g = seit.data.groupby('frequency')
    fig, axes = plt.subplots(
        4, 2,
        figsize=(15 / 2.54, 20 / 2.54),
        sharex=True, sharey=True
    )
    for ax, (key, item) in zip(axes.flat, g):
        fig, ax, cb = PS.plot_pseudosection_type2(item, ax=ax, column='r')
        ax.set_title('f: {} Hz'.format(key))
    fig.tight_layout()
    fig.savefig('pseudosections_eit40.pdf')



.. image:: /_examples/03_sEIT/images/sphx_glr_plot_eit40_001.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 0 minutes  53.466 seconds)


.. _sphx_glr_download__examples_03_sEIT_plot_eit40.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_eit40.py <plot_eit40.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_eit40.ipynb <plot_eit40.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
